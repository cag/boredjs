{"version":3,"sources":["app/boredjs/audio.js","app/boredjs/entity.js","app/boredjs/game.js","app/boredjs/geometry.js","app/boredjs/input.js","app/boredjs/loader.js","app/boredjs/map.js","app/boredjs/physics.js","app/boredjs/sprite.js","app/boredjs/util.js"],"names":[],"mappings":"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","file":"public/bored.js","sourcesContent":["define(['./util'], function(util) {\n    // A prefix and suffix applied to names passed into sound\n    // constructors so that they load from the right place.\n    let url_prefix = 'assets/';\n    let url_suffix = '.wav';\n    \n    // Thanks Boris Smus for the [Web Audio tutorial](http://www.html5rocks.com/en/tutorials/webaudio/intro/).\n    (function() {\n        let w = window;\n        w.AudioContext = w.AudioContext || w.webkitAudioContext;\n        return;\n    })();\n    \n    let audio_context = null;\n    \n    // Initializes the audio system.\n    return {\n        init() {\n            if (typeof AudioContext !== 'undefined' && AudioContext !== null) {\n                audio_context = new AudioContext();\n            } else {\n                console.warn('could not initialize audio!');\n            }\n            return;\n        },\n    \n        // See the [Web Audio API](https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html)\n        // for information on how to use the audio context.\n        getAudioContext() { return audio_context; },\n    \n        // The `Sound` class handles loading sound buffers and playing them.\n        Sound: class {\n            constructor(name, onload) {\n                this.name = name;\n                if (audio_context == null) {\n                    if (onload != null) { onload(); }\n                    return;\n                }\n            \n                let request = new XMLHttpRequest();\n                request.open('GET', url_prefix + this.name + url_suffix, true);\n                request.responseType = 'arraybuffer';\n            \n                let obj = this;\n                request.onload = () =>\n                    audio_context.decodeAudioData(request.response,\n                        (function(buffer) {\n                            obj.buffer = buffer;\n                            if (onload != null) { onload(); }\n                            return;\n                        }), function() {\n                            throw `could not load sound buffer from ${url}`;\n                            return;\n                        })\n                ;\n            \n                request.send();\n                return;\n            }\n        \n            // Pass in a node to connect to if not playing this sound\n            // straight to output.\n            play(delay = 0, looped = false, node) {\n                if ((audio_context != null) && (this.buffer != null)) {\n                    let source = audio_context.createBufferSource();\n                    source.buffer = this.buffer;\n                    source.loop = looped;\n                    source.connect(node || audio_context.destination);\n                    source.noteOn(delay + audio_context.currentTime);\n                    return source;\n                }\n                return null;\n            }\n        },\n    \n        // Ptolemy's intense diatonic tuning in A440 has a C4 of 264 Hz\n        ptolemy_c4: 264,\n        ptolemy_tuning_factors: [1, 9/8, 5/4, 4/3, 3/2, 5/3, 15/8],\n    \n        // Pythagorean tuning in A440 has a C4 of 260.741 Hz\n        pythagorean_c4: 260.741\n    };\n});\n\n","define(['./geometry'], geometry =>\n    // An entity which may be placed in a map and scripted with\n    // update, draw, onCollide, and onObstruct callbacks.\n    ({\n        Entity: class {\n            constructor(x, y, shape) {\n                this.x = x;\n                this.y = y;\n                this.shape = shape;\n            }\n        \n            // Puts a subpath of its underlying collision primitive onto\n            // the drawing context.\n            shapeSubpath(context, xoff, yoff) {\n                this.shape.subpath(context, this.x + xoff, this.y + yoff);\n                return;\n            }\n        \n            // Detects if entity bounds are left of another's bounds.\n            boundsLeftOf(other) {\n                return this.x + this.shape.bounds_offsets[1] <\n                    other.x + other.shape.bounds_offsets[0];\n            }\n    \n            // Tests whether entity box bounds intersect.\n            // This is useful for collision and drawing culling.\n            boundsIntersects(other) {\n                let bounds_a = this.shape.bounds_offsets;\n                let bounds_b = other.shape.bounds_offsets;\n            \n                return this.x + bounds_a[0] <= other.x + bounds_b[1] &&\n                    this.x + bounds_a[1] >= other.x + bounds_b[0] &&\n                    this.y + bounds_a[2] <= other.y + bounds_b[3] &&\n                    this.y + bounds_a[3] >= other.y + bounds_b[2];\n            }\n        \n            // Tests whether entity intersects another entity.\n            // Used when collision manager updates.\n            intersects(other) {\n                if (this.boundsIntersects(other)) {\n                    return geometry.intersects(this.x, other.x, this.y, other.y,\n                        this.shape, other.shape);\n                }\n                return false;\n            }\n        }\n    })\n);\n\n","define(['./util', './input', './audio'], function(util, input, audio) {\n    let canvas = null;\n    let context = null;\n    let game_w = 0;\n    let game_h = 0;\n    let game_x_offset = 0;\n    let game_y_offset = 0;\n    \n    let current_scene = null;\n    \n    // Stores the last delta time\n    let last_dt = null;\n    \n    // If delta time is fixed, this is set\n    let fixed_dt = null;\n    \n    // A clamp is placed on delta time so tunneling may be avoided with\n    // some careful planning by the developer.\n    let dt_clamp = 50;\n    let paused = true;\n\n    // Lists of coroutines for executing coroutines\n    let update_coroutines = [];\n    let draw_coroutines = [];\n    \n    // Callbacks for keys are delegated to the input module.\n    let handleKeyDown = function(event) {\n        input.handleKeyDown(event.keyCode);\n        return;\n    };\n    \n    let handleKeyUp = function(event) {\n        input.handleKeyUp(event.keyCode);\n        return;\n    };\n    \n    // Advances the execution state of a set of coroutines with a parameter\n    let advanceCoroutines = function(coroutines, arg) {\n        let iterable = __range__(coroutines.length-1, 0, true);\n        for (let j = iterable.length - 1; j >= 0; j--) {\n            let i = iterable[j];\n            let coroutine = coroutines[i];\n            coroutine.next(arg);\n            if (coroutine.done) {\n                coroutines.splice(i, 1);\n            }\n        }\n        return;\n    };\n\n    // Update call.\n    let update = function(dt) {\n        input.update();\n        current_scene.update(dt);\n        advanceCoroutines(update_coroutines, dt);\n        return;\n    };\n    \n    // Draw call.\n    let draw = function() {\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        context.save();\n        context.translate(game_x_offset, game_y_offset);\n        context.beginPath();\n        context.rect(0, 0, game_w, game_h);\n        context.clip();\n\n        current_scene.draw(context);\n        advanceCoroutines(draw_coroutines, context);\n\n        context.restore();\n        return;\n    };\n\n    // Canvas resizing callback\n    let resizeCanvasToAspectRatio = function() {\n        if (game_w / game_h < canvas.clientWidth / canvas.clientHeight) {\n            canvas.width = game_h * canvas.clientWidth / canvas.clientHeight;\n            canvas.height = game_h;\n            game_x_offset = (0.5 * (canvas.width - game_w)) | 0;\n            game_y_offset = 0;\n        } else {\n            canvas.width = game_w;\n            canvas.height = game_w * canvas.clientHeight / canvas.clientWidth;\n            game_x_offset = 0;\n            game_y_offset = (0.5 * (canvas.height - game_h)) | 0;\n        }\n        return;\n    };\n    return {\n        resizeCanvasToAspectRatio,\n    \n        // Canvas instance.\n        canvas() { return canvas; },\n    \n        // Game dimensions.\n        width() { return game_w; },\n        height() { return game_h; },\n    \n        // Last delta time.\n        lastDt() { return last_dt; },\n\n        // Current scene.\n        currentScene() { return current_scene; },\n    \n        // Switch scene to new scene.\n        switchScene(new_scene) {\n            if (new_scene == null) { throw 'cannot switch to nonexistent scene'; }\n            current_scene.end();\n            current_scene = new_scene;\n            current_scene.start();\n            return;\n        },\n    \n        // Initialize the game with the specified parameters. Pass in null\n        // for `fdt` (fixed delta-time) in order to initialize in variable\n        // delta-time mode. `dtc` clamps the delta time, and `initial_scene`\n        // is the first scene to start the game with.\n        init(width, height, fdt, dtc, initial_scene) {\n            current_scene = initial_scene;\n        \n            if (fdt != null) {\n                fixed_dt = fdt;\n                last_dt = fdt;\n            } else if (dtc != null) {\n                dt_clamp = dtc;\n                last_dt = dtc;\n            } else {\n                last_dt = 1 / 60;\n            }\n        \n            let container = (document.getElementById('game')) || document.body;\n            canvas = document.createElement('canvas');\n        \n            game_w = width;\n            game_h = height;\n\n            container.appendChild(canvas);\n            resizeCanvasToAspectRatio();\n        \n            context = canvas.getContext('2d');\n        \n            document.body.tabIndex = 0;\n            document.body.focus();\n        \n            input.init();\n        \n            document.body.addEventListener('keydown', handleKeyDown, false);\n            document.body.addEventListener('keyup', handleKeyUp, false);\n        \n            audio.init();\n            return;\n        },\n    \n        // Runs the game loop, starting the scene and calling update and\n        // draw when appropriate.\n        run() {\n            if (current_scene == null) { throw 'no current scene!'; }\n        \n            let {requestAnimationFrame} = window;\n            let {time} = util;\n        \n            let last_frame = time();\n            let dt_accumulator = 0;\n            paused = false;\n        \n            let gameLoop = function() {\n                if (!paused) { requestAnimationFrame(gameLoop); }\n                let now = time();\n                let dt = now - last_frame;\n                dt = dt > dt_clamp ? dt_clamp : dt;\n                last_frame = now;\n                if (fixed_dt != null) {\n                    dt_accumulator += dt;\n                    while (dt_accumulator > fixed_dt) {\n                        update(fixed_dt);\n                        dt_accumulator -= fixed_dt;\n                    }\n                } else {\n                    update(dt);\n                    last_dt = dt;\n                }\n                return draw();\n            };\n        \n            current_scene.start();\n            gameLoop();\n            return;\n        },\n\n        // Pushes a coroutine set onto the invocation stack.\n        invoke(coroutine_set) {\n            if (coroutine_set.draw != null) {\n                draw_coroutines.push(coroutine_set.draw);\n            }\n            if (coroutine_set.update != null) {\n                return update_coroutines.push(coroutine_set.update);\n            }\n        }\n    };\n});\n\nfunction __range__(left, right, inclusive) {\n  let range = [];\n  let ascending = left < right;\n  let end = !inclusive ? right : ascending ? right + 1 : right - 1;\n  for (let i = left; ascending ? i < end : i > end; ascending ? i++ : i--) {\n    range.push(i);\n  }\n  return range;\n}","define(function() {\n    // These constants determine how debug drawing is rendered when\n    // shape subpaths are being created.\n    let POINT_RADIUS = 2;\n    let NORMAL_OFFSET = 4;\n    let NORMAL_LENGTH = 2;\n    \n    // This is currently the epsilon used to detect small differences\n    // in normals.\n    let EPSILON = Math.pow(2, -50);\n    \n    // Some basic linear algebra.\n    let dotProduct = (u, v) => u[0] * v[0] + u[1] * v[1];\n    \n    let normalize = function(v) {\n        let invnorm = 1 / Math.sqrt((dotProduct(v, v)));\n        return [invnorm * v[0], invnorm * v[1]];\n    };\n    \n    // Axis is assumed to be normalized so only a dot product is used\n    // in the projection.\n    let projectShapeOntoAxis = function(shape, axis) {\n        let min = Number.POSITIVE_INFINITY;\n        let max = Number.NEGATIVE_INFINITY;\n        \n        let stype = shape.type;\n        \n        if (stype === 'Point') {\n            min = 0;\n            max = 0;\n        } else if (stype === 'Aabb') {\n            let hw_proj = dotProduct(shape.halfwidth, axis);\n            if (hw_proj < 0) {\n                min = Math.min(min, hw_proj);\n                max = Math.max(max, -hw_proj);\n            } else {\n                min = Math.min(min, -hw_proj);\n                max = Math.max(max, hw_proj);\n            }\n            \n            hw_proj = dotProduct([\n                    shape.halfwidth[0], -shape.halfwidth[1]\n                ], axis);\n            if (hw_proj < 0) {\n                min = Math.min(min, hw_proj);\n                max = Math.max(max, -hw_proj);\n            } else {\n                min = Math.min(min, -hw_proj);\n                max = Math.max(max, hw_proj);\n            }\n            \n        } else if (stype === 'Polygon') {\n            let pts = shape.points;\n            for (let i = 0; i < pts.length; i++) {\n                let point = pts[i];\n                let pt_proj = dotProduct(point, axis);\n                min = Math.min(min, pt_proj);\n                max = Math.max(max, pt_proj);\n            }\n        }\n        \n        return [min, max];\n    };\n    \n    // This returns how much interval `b` should be displaced to render\n    // the intervals disjoint (except maybe at a point).\n    let intervalsIntersect = function(a, b) {\n        if (a[1] < b[0] || b[1] < a[0]) { return false; }\n        \n        let aoff = b[1] - a[0];\n        let boff = a[1] - b[0];\n        \n        if (aoff < boff) { return -aoff; }\n        return boff;\n    };\n    \n    // Figures out how much shape is penetrating polygon. A penetration\n    // amount and direction may be passed in order to continue a test\n    // with data from prior analysis.\n    let calcShapePolygonMinimumPenetrationVector = function(s, sx, sy, p, px, py,\n      pen_amt = Number.POSITIVE_INFINITY,\n      pen_dir,\n      negate = false) {\n        let iterable = __range__(0, p.normals.length, false);\n        for (let j = 0; j < iterable.length; j++) {\n            let i = iterable[j];\n            let normal = p.normals[i];\n            let p_bounds = p.bounds_on_normals[i];\n            \n            let proj_s_pos = dotProduct([sx, sy], normal);\n            let proj_p_pos = dotProduct([px, py], normal);\n            \n            let s_bounds = projectShapeOntoAxis(s, normal);\n            \n            let intersects = intervalsIntersect([\n                s_bounds[0] + proj_s_pos, s_bounds[1] + proj_s_pos], [\n                p_bounds[0] + proj_p_pos, p_bounds[1] + proj_p_pos]);\n            \n            if (!intersects) { return false; }\n            \n            let abs_intersects = Math.abs(intersects);\n            \n            if (abs_intersects < pen_amt) {\n                pen_amt = abs_intersects;\n                if (negate === (intersects < 0)) {\n                    pen_dir = normal;\n                } else {\n                    pen_dir = [-normal[0], -normal[1]];\n                }\n            }\n        }\n        \n        return [pen_amt, pen_dir];\n    };\n    \n    // Finds bounds of the polygon. Equivalent to concatenating the\n    // results of a polygon projection onto [1, 0] and [0, 1].\n    let calcPolyBounds = function(points) {\n            let minx = points[0][0];\n            let maxx = points[0][0];\n            let miny = points[0][1];\n            let maxy = points[0][1];\n            for (let i = 0; i < points.length; i++) {\n                let point = points[i];\n                minx = Math.min(minx, point[0]);\n                maxx = Math.max(maxx, point[0]);\n                miny = Math.min(miny, point[1]);\n                maxy = Math.max(maxy, point[1]);\n            }\n            return [minx, maxx, miny, maxy];\n        };\n    \n    // A whole bunch of individual types of shape intersection tests.\n    // Polygons are assumed to be convex and use the hyperplane\n    // separation theorem. Points and AABBs are simply special cases.\n    let testPointPointIntersection = (p1, p1x, p1y, p2, p2x, p2y) => [0, [1, 0]];\n    \n    let testPointAabbIntersection = function(p, px, py, a, ax, ay) {\n        let pen_amt = ax + a.halfwidth[0] - px;\n        let pen_dir = [-1, 0];\n        \n        let next_proj = ay + a.halfwidth[1] - py;\n        if (next_proj < pen_amt) {\n            pen_amt = next_proj;\n            pen_dir = [0, -1];\n        }\n        \n        next_proj = px - (ax - a.halfwidth[0]);\n        if (next_proj < pen_amt) {\n            pen_amt = next_proj;\n            pen_dir = [1, 0];\n        }\n        \n        next_proj = py - (ay - a.halfwidth[1]);\n        if (next_proj < pen_amt) {\n            pen_amt = next_proj;\n            pen_dir = [0, 1];\n        }\n        \n        return [pen_amt, pen_dir];\n    };\n    \n    let testPointPolygonIntersection = (p1, p1x, p1y, p2, p2x, p2y) =>\n        calcShapePolygonMinimumPenetrationVector( \n            p1, p1x, p1y,\n            p2, p2x, p2y)\n    ;\n    \n    let testAabbAabbIntersection = function(a1, a1x, a1y, a2, a2x, a2y) {\n        let pen_amt = a2x + a2.halfwidth[0] - (a1x - a1.halfwidth[0]);\n        let pen_dir = [-1, 0];\n        \n        let next_proj = a2y + a2.halfwidth[1] - (a1y - a1.halfwidth[1]);\n        if (next_proj < pen_amt) {\n            pen_amt = next_proj;\n            pen_dir = [0, -1];\n        }\n        \n        next_proj = a1x + a1.halfwidth[0] - (a2x - a2.halfwidth[0]);\n        if (next_proj < pen_amt) {\n            pen_amt = next_proj;\n            pen_dir = [1, 0];\n        }\n        \n        next_proj = a1y + a1.halfwidth[1] - (a2y - a2.halfwidth[1]);\n        if (next_proj < pen_amt) {\n            pen_amt = next_proj;\n            pen_dir = [0, 1];\n        }\n        \n        return [pen_amt, pen_dir];\n    };\n    \n    let testAabbPolygonIntersection = function(a, ax, ay, p, px, py) {\n        let intersects = intervalsIntersect([\n            ax + a.bounds_offsets[0], ax + a.bounds_offsets[1]], [\n            px + p.bounds_offsets[0], px + p.bounds_offsets[1]]);\n        \n        if (intersects < 0) {\n            var pen_amt = -intersects;\n            var pen_dir = [-1, 0];\n        } else {\n            var pen_amt = intersects;\n            var pen_dir = [1, 0];\n        }\n        \n        intersects = intervalsIntersect([\n            ay + a.bounds_offsets[2], ay + a.bounds_offsets[3]], [\n            py + p.bounds_offsets[2], py + p.bounds_offsets[3]]);\n        \n        if (intersects < 0) {\n            var pen_amt = -intersects;\n            var pen_dir = [0, -1];\n        } else {\n            var pen_amt = intersects;\n            var pen_dir = [0, 1];\n        }\n        \n        return calcShapePolygonMinimumPenetrationVector( \n            a, ax, ay,\n            p, px, py,\n            pen_amt, pen_dir);\n    };\n    \n    let testPolygonPolygonIntersection = function(p1, p1x, p1y, p2, p2x, p2y) {\n        let ret = calcShapePolygonMinimumPenetrationVector( \n            p1, p1x, p1y,\n            p2, p2x, p2y);\n        \n        if (ret) {\n            var [pen_amt, pen_dir] = ret;\n        } else {\n            return false;\n        }\n        \n        return calcShapePolygonMinimumPenetrationVector( \n            p2, p2x, p2y,\n            p1, p1x, p1y,\n            pen_amt, pen_dir, true);\n    };\n    \n    // A mapping from pairs of shape types to the appropriate hit test.\n    let intersection_test_map = {\n        Point: {\n            Point: testPointPointIntersection,\n            Aabb: testPointAabbIntersection,\n            Polygon: testPointPolygonIntersection\n        },\n        Aabb: {\n            Aabb: testAabbAabbIntersection,\n            Polygon: testAabbPolygonIntersection\n        },\n        Polygon: {\n            Polygon: testPolygonPolygonIntersection\n        }\n    };\n    \n    return {\n        dotProduct,\n    \n        // A point.\n        Point: class {\n            constructor() {\n                this.type = 'Point';\n                this.bounds_offsets = [0, 0, 0, 0];\n            }\n            \n            subpath(context, offx, offy) {\n                context.moveTo(offx + POINT_RADIUS, offy);\n                context.arc(offx, offy, POINT_RADIUS, 0, 2 * Math.PI);\n                return;\n            }\n        },\n    \n        // An axis-aligned bounding box.\n        Aabb: class {\n            constructor(halfwidth) {\n                this.halfwidth = halfwidth;\n                this.type = 'Aabb';\n                let hw = this.halfwidth;\n                this.bounds_offsets = [-hw[0], hw[0], -hw[1], hw[1]];\n                return;\n            }\n        \n            subpath(context, offx, offy) {\n                let hw = this.halfwidth;\n                context.rect(offx - hw[0], offy - hw[1],\n                    2 * hw[0], 2 * hw[1]);\n                return;\n            }\n        },\n    \n        // A *convex* polygon.\n        Polygon: class {\n            constructor(points) {\n                this.type = 'Polygon';\n                this.bounds_offsets = calcPolyBounds(points);\n            \n                let sumx = 0;\n                let sumy = 0;\n                let num_vertices = points.length;\n                for (let i1 = 0; i1 < points.length; i1++) {\n                    let pt = points[i1];\n                    sumx += pt[0];\n                    sumy += pt[1];\n                }\n                this.center_offset = [sumx / num_vertices, sumy / num_vertices];\n            \n                let ccw = null;\n                let ptslen = points.length;\n                let iterable = __range__(0, ptslen, false);\n                for (let j1 = 0; j1 < iterable.length; j1++) {\n                    var i = iterable[j1];\n                    var j = (i + 1) % ptslen;\n                    let k = (i + 2) % ptslen;\n                    let edge1 = [points[j][0] - points[i][0],\n                        points[j][1] - points[i][1]];\n                    let edge2 = [points[k][0] - points[j][0],\n                        points[k][1] - points[j][1]];\n                    let cross = edge1[0] * edge2[1] - edge2[0] * edge1[1];\n                \n                    if (ccw != null) {\n                        if (ccw && cross > 0 || !ccw && cross < 0) {\n                            throw 'tried to construct non-convex polygon';\n                        }\n                    } else {\n                        ccw = cross < 0;\n                    }\n                }\n            \n                if (ccw) {\n                    this.points = points.reverse();\n                } else {\n                    this.points = points;\n                }\n            \n                let normals = [];\n                let bounds_on_normals = [];\n                let iterable1 = __range__(0, ptslen, false);\n                for (let k1 = 0; k1 < iterable1.length; k1++) {\n                    var i = iterable1[k1];\n                    var j = (i + 1) % ptslen;\n                    let normal = normalize([this.points[i][1] - this.points[j][1],\n                        this.points[j][0] - this.points[i][0]]);\n                \n                    let skip = false;\n                    for (let i2 = 0; i2 < normals.length; i2++) {\n                        let other = normals[i2];\n                        if (Math.abs(dotProduct(normal, other)) > 1 - EPSILON) {\n                            skip = true;\n                            continue;\n                        }\n                    }\n                \n                    if (skip) { continue; }\n                \n                    let bounds_on_normal = projectShapeOntoAxis(this, normal);\n                \n                    normals.push(normal);\n                    bounds_on_normals.push(bounds_on_normal);\n                }\n            \n                this.normals = normals;\n                this.bounds_on_normals = bounds_on_normals;\n            \n                return;\n            }\n        \n            subpath(context, offx, offy) {\n                let pts = this.points;\n                context.moveTo(pts[0][0] + offx, pts[0][1] + offy);\n                let iterable = __range__(1, pts.length, false);\n                for (let j = 0; j < iterable.length; j++) {\n                    let i = iterable[j];\n                    context.lineTo(pts[i][0] + offx, pts[i][1] + offy);\n                }\n                context.closePath();\n            \n                let coffx = offx + this.center_offset[0];\n                let coffy = offy + this.center_offset[1];\n                context.moveTo(coffx + POINT_RADIUS, coffy);\n                context.arc(coffx, coffy, POINT_RADIUS, 0, 2 * Math.PI);\n            \n                for (let k = 0; k < this.normals.length; k++) {\n                    let normal = this.normals[k];\n                    context.moveTo(coffx + NORMAL_OFFSET * normal[0],\n                        coffy + NORMAL_OFFSET * normal[1]);\n                    context.lineTo(coffx +\n                        (NORMAL_LENGTH + NORMAL_OFFSET) * normal[0],\n                        coffy + (NORMAL_LENGTH + NORMAL_OFFSET) * normal[1]);\n                }\n            \n                return;\n            }\n        },\n    \n        intersects(x_a, x_b, y_a, y_b, shape_a, shape_b) {\n            let test = intersection_test_map[shape_a.type];\n            if (test != null) {\n                test = test[shape_b.type];\n                if (test != null) {\n                    return test(shape_a, x_a, y_a, shape_b, x_b, y_b);\n                }\n            } else {\n                test = intersection_test_map[shape_b.type];\n                if (test != null) {\n                    test = test[shape_a.type];\n                    if (test != null) {\n                        let result = test(shape_b, x_b, y_b, shape_a, x_a, y_a);\n                        if (result) {\n                            return [result[0], [-result[1][0], -result[1][1]]];\n                        } else {\n                            return false;\n                        }\n                    }\n                }\n            }\n        \n            throw `can't test ${shape_a.type} against ${shape_b.type}`;\n            return false;\n        }\n    };\n});\n\n\nfunction __range__(left, right, inclusive) {\n  let range = [];\n  let ascending = left < right;\n  let end = !inclusive ? right : ascending ? right + 1 : right - 1;\n  for (let i = left; ascending ? i < end : i > end; ascending ? i++ : i--) {\n    range.push(i);\n  }\n  return range;\n}","define(() =>\n    // A default map of button names to key code values.\n    ({\n        default_buttons: {\n            left: 37,\n            up: 38,\n            right: 39,\n            down: 40,\n            run: 16,\n            jump: 90,\n            debug: 192\n        },\n    \n        init(buttons) {\n            this.buttons = buttons || this.default_buttons;\n            for (let button in this.buttons) {\n                this[button] = {};\n            }\n            return;\n        },\n    \n        update() {\n            // Each button's pressed and released states stay true for only\n            // up to one frame per press.\n            let updateInputHash = function(hash) {\n                if (hash.state) {\n                    if (hash.last_state) {\n                        hash.pressed = false;\n                    } else {\n                        hash.pressed = true;\n                    }\n                } else {\n                    if (hash.last_state) {\n                        hash.released = true;\n                    } else {\n                        hash.released = false;\n                    }\n                }\n            \n                hash.last_state = hash.state;\n                return;\n            };\n        \n            for (let button in this.buttons) {\n                updateInputHash(this[button]);\n            }\n        \n            return;\n        },\n    \n        handleKeyDown(keyCode) {\n            for (let button in this.buttons) {\n                let bcode = this.buttons[button];\n                if (keyCode === bcode) {\n                    this[button].state = true;\n                }\n            }\n            return;\n        },\n    \n        handleKeyUp(keyCode) {\n            for (let button in this.buttons) {\n                let bcode = this.buttons[button];\n                if (keyCode === bcode) {\n                    this[button].state = false;\n                }\n            }\n            return;\n        }\n    })\n);\n\n","define(['./map', './sprite', './audio'], (map, sprite, audio) =>\n    // A scene for loading resources. Pass in an object of the form:\n    // \n    //     {\n    //         maps:\n    //             MAPVAR: { name: MAPNAME, script: MAPSCRIPT },\n    //             ...\n    //         sprites:\n    //             SPRITEVAR: SPRITENAME,\n    //             ...\n    //         sounds:\n    //             SOUNDVAR: SOUNDNAME,\n    //             ...\n    //     }\n    //\n    // The resources will load into an object of the form:\n    // \n    //     {\n    //         maps:\n    //             MAPVAR: MAP,\n    //             ...\n    //         sprites:\n    //             SPRITEVAR: SPRITE,\n    //             ...\n    //         sounds:\n    //             SOUNDVAR: SOUND,\n    //             ...\n    //     }\n    // \n    // This object will be passed into the `@onload` callback, which\n    // will be a good time for setting up a new scene to switch into.\n    ({\n        LoaderScene: class {\n            constructor(resources, onload) {\n                this.resources = resources;\n                this.onload = onload;\n                this.loaded = {\n                    maps: {},\n                    sprites: {},\n                    sounds: {}\n                };\n            \n                let resource_count = 0;\n                for (let type in this.resources) {\n                    let obj = this.resources[type];\n                    resource_count += (Object.keys(obj)).length;\n                }\n                this.resource_count = resource_count;\n            \n                if (resource_count <= 0) {\n                    throw `invalid resource count (${resource_count})`;\n                }\n                return;\n            }\n        \n            start() {\n                let {Map} = map;\n                let {Sprite} = sprite;\n                let {Sound} = audio;\n            \n                let load_count = 0;\n                let loader = this;\n                this.progress = 0;\n                this.finished = false;\n            \n                let callback = function() {\n                    ++load_count;\n                    loader.progress = load_count / loader.resource_count;\n                    // console.log loader.progress\n                    if (load_count === loader.resource_count) {\n                        loader.finished = true;\n                        if (loader.onload != null) { loader.onload(loader.loaded); }\n                    }\n                    return;\n                };\n            \n                for (let type in this.resources) {\n                    let obj = this.resources[type];\n                    let target = this.loaded[type];\n                \n                    if (type === 'maps') {\n                        for (var key in obj) {\n                            var res = obj[key];\n                            target[key] = new Map(res.name, res.script,\n                                callback);\n                        }\n                    } else if (type === 'sprites') {\n                        for (var key in obj) {\n                            var res = obj[key];\n                            target[key] = new Sprite(res, callback);\n                        }\n                    } else if (type === 'sounds') {\n                        for (var key in obj) {\n                            var res = obj[key];\n                            target[key] = new Sound(res, callback);\n                        }\n                    } else {\n                        throw `attempting to load unknown type ${type}`;\n                    }\n                }\n                return;\n            }\n        \n            end() {\n                return;\n            }\n        \n            update(dt) {\n                return;\n            }\n        \n            draw(context) {\n                return;\n            }\n        }\n    })\n);\n\n","define(['jquery', './game', './input', './entity', './geometry', './util'],\n  function($, game, input, entity, geometry, util) {\n    // A prefix and suffix applied to names passed into map constructors\n    // so that it loads from the right place.\n    let numt;\n    let cw;\n    let ch;\n    let url_prefix = 'assets/';\n    let url_suffix = '.json';\n    \n    // If `layers_cached` is true, then tiles will be cached in blocks\n    // of `layer_cache_factor` square and the blocks will be drawn\n    // instead of tiles.\n    let layers_cached = true;\n    let layer_cache_factor = 16;\n    \n    // Comparison helper functions for sorting entities.\n    let byLeftBound = (ent_a, ent_b) =>\n        ent_a.x + ent_a.shape.bounds_offsets[0] -\n            ent_b.x - ent_b.shape.bounds_offsets[0]\n    ;\n    \n    let byBottomBound = (ent_a, ent_b) =>\n        ent_a.y + ent_a.shape.bounds_offsets[3] -\n            ent_b.y - ent_b.shape.bounds_offsets[3]\n    ;\n    \n    // This module expects maps created in [Tiled](http://www.mapeditor.org/)\n    // and exported using the JSON option.\n    // Refer to the [TMX Map Format](https://github.com/bjorn/tiled/wiki/TMX-Map-Format)\n    // for information on how the map format works.\n    class TileSet {\n        constructor(json_data, onload) {\n            this.name = json_data.name;\n            this.first_gid = json_data.firstgid;\n            this.tile_width = json_data.tilewidth;\n            this.tile_height = json_data.tileheight;\n            this.margin = json_data.margin;\n            this.spacing = json_data.spacing;\n            this.properties = json_data.properties;\n            \n            let tileset = this;\n            this.image = new Image();\n            this.image.onload = function() {\n                let iw = this.naturalWidth;\n                let ih = this.naturalHeight;\n                if (iw !== json_data.imagewidth ||\n                   ih !== json_data.imageheight) {\n                    throw `tileset ${tileset.name}` +\n                        ' dimension mismatch (' +\n                        iw + 'x' + ih + ' vs ' +\n                        this.naturalWidth + 'x' + this.naturalHeight + ')';\n                }\n                \n                tileset.setupTileMapping();\n                if (onload != null) { return onload(); }\n            };\n            this.image.src = url_prefix + json_data.image;\n            return;\n        }\n        \n        setupTileMapping() {\n            let img = this.image;\n            let iw = img.naturalWidth;\n            let ih = img.naturalHeight;\n            let tw = this.tile_width;\n            let th = this.tile_height;\n            \n            let { margin } = this;\n            let twps = tw + this.spacing;\n            let thps = th + this.spacing;\n            \n            let numtx = ((iw - margin) / twps) | 0;\n            let numty = ((ih - margin) / thps) | 0;\n            this.num_tiles = numt = numtx * numty;\n            \n            let grabTile = function(xiter, yiter) {\n                let tcanvas = document.createElement('canvas');\n                tcanvas.width = tw;\n                tcanvas.height = th;\n                \n                let sx = margin + xiter * twps;\n                let sy = margin + yiter * thps;\n                \n                let tctx = tcanvas.getContext('2d');\n                tctx.drawImage(img, sx, sy, tw, th, 0, 0, tw, th);\n                \n                return tcanvas;\n            };\n            \n            this.tiles = __range__(0, numt, false).map(i => grabTile(i % numtx, (i / numtx) | 0));\n            \n            return;\n        }\n        \n        hasGID(gid) { return this.first_gid <= gid && gid < this.first_gid + this.num_tiles; }\n        \n        drawTile(context, gid, flip_h, flip_v, flip_d, x, y) {\n            let idx = gid - this.first_gid;\n            let tw = this.tile_width;\n            let th = this.tile_height;\n            \n            context.save();\n            \n            context.translate(x, y);\n            if (flip_h) { context.transform(-1, 0, 0, 1, tw, 0); }\n            if (flip_v) { context.transform(1, 0, 0, -1, 0, th); }\n            if (flip_d) { context.transform(0, 1, 1, 0, 0, 0); }\n            \n            context.drawImage(this.tiles[idx], 0, 0);\n            \n            context.restore();\n            return;\n        }\n    }\n    \n    class Layer {\n        constructor(json_data, map) {\n            this.map = map;\n            this.name = json_data.name;\n            this.type = json_data.type;\n            this.properties = json_data.properties;\n            this.visible = json_data.visible;\n            this.opacity = json_data.opacity;\n            this.x = json_data.x;\n            this.y = json_data.y;\n            this.width = json_data.width;\n            this.height = json_data.height;\n            return;\n        }\n    }\n    \n    class TileLayer extends Layer {\n        constructor(json_data, map) {\n            super(json_data, map);\n            \n            if (this.type !== 'tilelayer') {\n                throw `can't construct TileLayer from ${this.type} layer`;\n            }\n            \n            let parseGID = function(gid) {\n                let flip_h = false;\n                // Javascript uses 32-bit signed bitwise ops, but\n                // values are written to json unsigned in Tiled.\n                if (gid > 2147483648) {\n                    flip_h = true;\n                    gid -= 2147483648;\n                }\n                let flip_v = gid & 1073741824 ? true : false;\n                let flip_d = gid & 536870912 ? true : false;\n                gid &= ~1610612736;\n                return [gid, flip_h, flip_v, flip_d];\n            };\n            \n            let { width } = this;\n            let { height } = this;\n            this.data = [];\n            let iterable = __range__(0, width, false);\n            for (let k = 0; k < iterable.length; k++) {\n                let i = iterable[k];\n                let iterable1 = __range__(0, height, false);\n                for (let i1 = 0; i1 < iterable1.length; i1++) {\n                    let j = iterable1[i1];\n                    this.data.push(parseGID(json_data.data[i + j * width]));\n                }\n            }\n            \n            // Parallax can be set in tile layer properties in Tiled.\n            if (this.properties != null) {\n                if (this.properties.parallax != null) {\n                    this.parallax = +this.properties.parallax;\n                }\n            } else {\n                this.parallax = 1;\n            }\n            \n            return;\n        }\n        \n        buildCache() {\n            let layer = this;\n            let lcf = layer_cache_factor;\n            let w = this.width;\n            let h = this.height;\n            let tw = this.map.tilewidth;\n            let th = this.map.tileheight;\n            this.cache_width = cw = Math.ceil(w / lcf);\n            this.cache_height = ch = Math.ceil(h / lcf);\n            \n            let cacheBlock = function(bi, bj) {\n                let nbx = Math.min(lcf, w - bi);\n                let nby = Math.min(lcf, h - bj);\n                \n                let canvas = document.createElement('canvas');\n                canvas.width = tw * nbx;\n                canvas.height = th * nby;\n                \n                let context = canvas.getContext('2d');\n                layer.drawRaw(context, bi, bi + nbx, bj, bj + nby, 0, 0);\n                \n                return canvas;\n            };\n            this.cache = [];\n            let iterable = __range__(0, cw, false);\n            for (let k = 0; k < iterable.length; k++) {\n                let i = iterable[k];\n                let iterable1 = __range__(0, ch, false);\n                for (let i1 = 0; i1 < iterable1.length; i1++) {\n                    let j = iterable1[i1];\n                    this.cache.push(cacheBlock(i * lcf, j * lcf));\n                }\n            }\n            \n            return;\n        }\n        \n        setTile(txi, tyi, td) {\n            this.data[txi][tyi] = td;\n            if (layers_cached) {\n                let { map } = this;\n                let lcf = layer_cache_factor;\n                let ci = (txi / lcf) | 0;\n                let cj = (tyi / lcf) | 0;\n                let block = this.cache[ci][cj];\n                let bxo = (txi % lcf) * map.tilewidth;\n                let byo = (tyi % lcf) * map.tileheight;\n                let context = block.getContext('2d');\n                map.drawTile(context,\n                    td[0], td[1], td[2], td[3],\n                    bxo, byo);\n            }\n            return;\n        }\n\n        drawRaw(context, lowtx, hightx, lowty, highty, dx, dy) {\n            let { map } = this;\n            let tw = map.tilewidth;\n            let th = map.tileheight;\n            let { data } = this;\n            let iterable = __range__(lowtx, hightx, false);\n            for (let k = 0; k < iterable.length; k++) {\n                let i = iterable[k];\n                let iterable1 = __range__(lowty, highty, false);\n                for (let i1 = 0; i1 < iterable1.length; i1++) {\n                    let j = iterable1[i1];\n                    let datum = data[i][j];\n                    map.drawTile(context,\n                        datum[0], datum[1], datum[2], datum[3],\n                        dx + (i - lowtx) * tw,\n                        dy + (j - lowty) * th);\n                }\n            }\n            return;\n        }\n        \n        draw(context, targx, targy) {\n            let { map } = this;\n            let cam = map.camera;\n            let cambounds = cam.shape.bounds_offsets;\n            \n            let tw = map.tilewidth;\n            let th = map.tileheight;\n            \n            let mlcamxwp = cam.x * this.parallax - this.x * tw;\n            let mlcamywp = cam.y * this.parallax - this.y * th;\n            \n            let w = cambounds[1] - cambounds[0];\n            let h = cambounds[3] - cambounds[2];\n            \n            let destx = targx - mlcamxwp;\n            let desty = targy - mlcamywp;\n            \n            let mlsx = mlcamxwp + cambounds[0];\n            let mlsy = mlcamywp + cambounds[2];\n            \n            context.save();\n            \n            context.beginPath();\n            cam.shapeSubpath(context, targx - cam.x, targy - cam.y);\n            context.clip();\n            \n            context.globalAlpha *= this.opacity;\n            \n            if (layers_cached) {\n                let { cache } = this;\n                let lcf = layer_cache_factor;\n                let bw = tw * lcf;\n                let bh = th * lcf;\n                let lowbx = Math.max(0, (mlsx / bw) | 0);\n                let highbx = Math.min(this.cache_width,\n                    Math.ceil((mlsx + w) / bw));\n                let lowby = Math.max(0, (mlsy / bh) | 0);\n                let highby = Math.min(this.cache_height,\n                    Math.ceil((mlsy + h) / bh));\n                \n                let iterable = __range__(lowbx, highbx, false);\n                for (let k = 0; k < iterable.length; k++) {\n                    let i = iterable[k];\n                    let iterable1 = __range__(lowby, highby, false);\n                    for (let i1 = 0; i1 < iterable1.length; i1++) {\n                        let j = iterable1[i1];\n                        context.drawImage(cache[i][j],\n                            Math.round(destx + i * bw),\n                            Math.round(desty + j * bh));\n                    }\n                }\n            } else {\n                let lowtx = Math.max(0, (mlsx / tw) | 0);\n                let hightx = Math.min(this.width, Math.ceil((mlsx + w) / tw));\n                let lowty = Math.max(0, (mlsy / th) | 0);\n                let highty = Math.min(this.height, Math.ceil((mlsy + h) / th));\n                \n                this.drawRaw(context, lowtx, hightx, lowty, highty,\n                    Math.round(destx + lowtx * tw),\n                    Math.round(desty + lowty * th));\n            }\n                \n            context.restore();\n            return;\n        }\n    }\n    \n    class ObjectLayer extends Layer {\n        constructor(json_data, map) {\n            // Bitmasks are created from a comma-separated list of\n            // integers from 0-31. They are used to determine collision\n            // groups for zones and obstruction groups.\n            let tryMakingBitmaskFromString = function(bitmask_str) {\n                if (bitmask_str != null) {\n                    return constructBitmask(bitmask_str.split(','));\n                }\n                return 0;\n            };\n            \n            let {Point, Aabb, Polyline, Polygon} = geometry;\n            let {Entity} = entity;\n            var {constructBitmask} = util;\n            \n            super(json_data, map);\n            \n            if (this.type !== 'objectgroup') {\n                throw `can't construct ObjectLayer from ${this.type} layer`;\n            }\n            \n            let { objects } = json_data;\n            this.entities = [];\n            let mapents = map.entities;\n            \n            if (this.properties != null) {\n                var l_collides = tryMakingBitmaskFromString( \n                    this.properties.collides);\n                var l_onCollide = map.tryGettingCallbackForName( \n                    this.properties.onCollide);\n                \n                var l_obstructs = tryMakingBitmaskFromString( \n                    this.properties.obstructs);\n                var l_onObstruct = map.tryGettingCallbackForName( \n                    this.properties.onObstruct);\n            }\n            \n            let setupEntityWithProperties = function(ent, object) {\n                if (object.properties != null) {\n                    ent.onStart = map.tryGettingCallbackForName( \n                        object.properties.onStart);\n                    \n                    // Object level callbacks take precedence over layer\n                    // level callbacks.\n                    \n                    let obj_onCollide = map.tryGettingCallbackForName( \n                        object.properties.onCollide);\n                    \n                    if (obj_onCollide != null) {\n                        ent.onCollide = obj_onCollide;\n                    } else {\n                        ent.onCollide = l_onCollide;\n                    }\n                    \n                    let obj_onObstruct = map.tryGettingCallbackForName( \n                        object.properties.onObstruct);\n                    \n                    if (obj_onObstruct != null) {\n                        ent.onObstruct = obj_onObstruct;\n                    } else {\n                        ent.onObstruct = l_onObstruct;\n                    }\n                }\n                \n                // These objects are assumed not to move, so they\n                // may act as static obstructions/zones.\n                ent.static = true;\n                \n                if (object.properties != null) {\n                    // Bitmasks from the object and layer are combined.\n                    let obj_collides = tryMakingBitmaskFromString( \n                        object.properties.collides);\n                    ent.collides = l_collides | obj_collides;\n                    \n                    let obj_obstructs = tryMakingBitmaskFromString( \n                        object.properties.obstructs);\n                    ent.obstructs = l_obstructs | obj_obstructs;\n                    \n                    ent.properties = object.properties;\n                }\n\n                return;\n            };\n            \n            for (let j = 0; j < objects.length; j++) {\n                let object = objects[j];\n                let objx = object.x;\n                let objy = object.y;\n                let objw = object.width;\n                let objh = object.height;\n                \n                if (object.polygon != null) {\n                    var ent = new Entity(objx, objy,\n                        new Polygon(object.polygon.map(point => [point.x, point.y])));\n                } else if (object.polyline != null) {\n                    // Polylines are modeled as multiple polygons.\n                    let iterable = __range__(0, object.polyline.length - 1, false);\n                    for (let k = 0; k < iterable.length; k++) {\n                        let i = iterable[k];\n                        let point_a = object.polyline[i];\n                        let point_b = object.polyline[i + 1];\n                        var ent = new Entity(objx, objy,\n                            new Polygon([[point_a.x, point_a.y],\n                                [point_b.x, point_b.y]]));\n                        \n                        setupEntityWithProperties(ent, object);\n                        this.addEntity(ent);\n                    }\n                    continue;\n                } else if (objw === 0 && objh === 0) {\n                    var ent = new Entity(objx, objy, new Point());\n                } else {\n                    let objhwx = .5 * objw;\n                    let objhwy = .5 * objh;\n                    var ent = new Entity(objx + objhwx, objy + objhwy,\n                        new Aabb([objhwx, objhwy]));\n                }\n                \n                setupEntityWithProperties(ent, object);\n                this.addEntity(ent);\n            }\n            \n            this.entities.sort(byBottomBound);\n            if (this.properties != null) { this.onStart = map.tryGettingCallbackForName(this.properties.onStart); }\n            return;\n        }\n        \n        addEntity(ent) {\n            ent.layer = this;\n            ent.map = this.map;\n            this.entities.push(ent);\n            return this.map.entities.push(ent);\n        }\n        \n        draw(context, targx, targy) {\n            let { map } = this;\n            let cam = map.camera;\n            \n            let xoff = targx - cam.x - this.x * map.tilewidth;\n            let yoff = targy - cam.y - this.y * map.tileheight;\n            \n            let ents = this.entities;\n            util.persistentSort(ents, byBottomBound);\n            for (let i = 0; i < ents.length; i++) {\n                let ent = ents[i];\n                if (ent.draw != null) { ent.draw(context, xoff, yoff); }\n            }\n            return;\n        }\n        \n        debugDraw(context, targx, targy) {\n            let { map } = this;\n            let cam = map.camera;\n            let cambounds = cam.shape.bounds_offsets;\n            let camlx = cam.x + cambounds[0];\n            let camly = cam.y + cambounds[2];\n            let w = cambounds[1] - cambounds[0];\n            let h = cambounds[3] - cambounds[2];\n            let destx = targx + cambounds[0];\n            let desty = targy + cambounds[2];\n            \n            let xoff = destx - camlx - this.x * this.map.tilewidth;\n            let yoff = desty - camly - this.y * this.map.tileheight;\n            \n            context.save();\n            context.beginPath();\n            context.globalAlpha *= .75;\n            \n            for (let i = 0; i < this.entities.length; i++) {\n                let ent = this.entities[i];\n                if (ent.boundsIntersects(cam)) {\n                    ent.shapeSubpath(context, xoff, yoff);\n                }\n            }\n            \n            context.stroke();\n            \n            context.restore();\n            return;\n        }\n    }\n    \n    // Maps are loaded from a URL containing `@name` and callbacks are\n    // searched for inside of the `@script` passed.\n    return {\n        Map: class {\n            constructor(name, script, onload) {\n                this.name = name;\n                this.script = script;\n                this.loaded = false;\n                this.entities = [];\n                let cb_target = this;\n                $.getJSON(url_prefix + this.name + url_suffix,\n                    (function(data) { cb_target.load(data, onload); return; }));\n                return;\n            }\n        \n            load(json_data, onload) {\n                if (json_data.orientation !== 'orthogonal') {\n                    throw `orientation ${orientation} not supported`;\n                }\n            \n                this.width = json_data.width;\n                this.height = json_data.height;\n                this.tilewidth = json_data.tilewidth;\n                this.tileheight = json_data.tileheight;\n                this.orientation = json_data.orientation;\n                this.properties = json_data.properties;\n            \n                let map = this;\n            \n                let createLayer = function(data) {\n                    let {type} = data;\n                    if (type === 'tilelayer') {\n                        return new TileLayer(data, map);\n                    } else if (type === 'objectgroup') {\n                        return new ObjectLayer(data, map);\n                    } else {\n                        console.warn(`unknown layer type ${type} requested`);\n                        return new Layer(data, map);\n                    }\n                };\n            \n                this.layers = json_data.layers.map(createLayer);\n            \n                let {tilesets} = json_data;\n                let tileset_load_total = tilesets.length;\n                let tileset_load_count = 0;\n                let ts_load_cb = function() {\n                    if (++tileset_load_count >= tileset_load_total) {\n                        if (layers_cached) { map.buildLayerCaches(); }\n                        map.loaded = true;\n                        if (onload != null) { onload(); }\n                    }\n                    return;\n                };\n            \n                this.tilesets = tilesets.map(ts => new TileSet(ts, ts_load_cb));\n            \n                this.entities.sort(byLeftBound);\n                return;\n            }\n        \n            tryGettingCallbackForName(name) {\n                if (name != null) {\n                    let callback = this.script[name];\n                    if (callback != null) {\n                        return callback;\n                    } else {\n                        throw `missing callback ${name}!`;\n                    }\n                }\n                return null;\n            }\n        \n            buildLayerCaches() {\n                for (let i = 0; i < this.layers.length; i++) {\n                    let layer = this.layers[i];\n                    if (layer.type === 'tilelayer') {\n                        layer.buildCache();\n                    }\n                }\n                return;\n            }\n        \n            drawTile(context, gid, flip_h, flip_v, flip_d, x, y) {\n                for (let i = 0; i < this.tilesets.length; i++) {\n                    let tileset = this.tilesets[i];\n                    if (tileset.hasGID(gid)) {\n                        tileset.drawTile(context,\n                            gid, flip_h, flip_v, flip_d, x, y);\n                        break;\n                    }\n                }\n                return;\n            }\n        \n            doCollisions() {\n                let ents = this.entities;\n                util.persistentSort(ents, byLeftBound);\n                let j = 0;\n                let iterable = __range__(1, ents.length, false);\n                for (let i1 = 0; i1 < iterable.length; i1++) {\n                    let i = iterable[i1];\n                    let enti = this.entities[i];\n                \n                    while (j < i &&\n                      ents[j].x + ents[j].shape.bounds_offsets[1] <\n                      enti.x + enti.shape.bounds_offsets[0]) {\n                        ++j;\n                    }\n                \n                    let iterable1 = __range__(j, i, false);\n                    for (let j1 = 0; j1 < iterable1.length; j1++) {\n                        let k = iterable1[j1];\n                        this.doCollision(enti, this.entities[k]);\n                    }\n                }\n            \n                return;\n            }\n        \n            doCollision(ent_a, ent_b) {\n                if (ent_a.static && ent_b.static) { return; }\n            \n                let can_collide = (ent_a.collides & ent_b.collides);\n                let can_obstruct = (ent_a.obstructs & ent_b.obstructs);\n            \n                if (!can_collide && !can_obstruct) { return; }\n            \n                let collision_info = ent_a.intersects(ent_b);\n            \n                if (collision_info) {\n                    let [pen_amt, pen_dir] = collision_info;\n                \n                    let neg_collision_info = \n                        [pen_amt, [-pen_dir[0], -pen_dir[1]]];\n                \n                    if (ent_a.onCollide != null) { ent_a.onCollide(ent_b, collision_info); }\n                    if (ent_b.onCollide != null) { ent_b.onCollide(ent_a, neg_collision_info); }\n                \n                    if (can_obstruct) {\n                        let proj_x = pen_amt * pen_dir[0];\n                        let proj_y = pen_amt * pen_dir[1];\n                        if (ent_a.static) {\n                            ent_b.x += proj_x;\n                            ent_b.y += proj_y;\n                        } else if (ent_b.static) {\n                            ent_a.x -= proj_x;\n                            ent_a.y -= proj_y;\n                        } else {\n                            // For now, splits the resolution 50-50 between\n                            // dynamic objects.\n                            let rat = .5;\n                            let notrat = 1 - rat;\n                        \n                            ent_a.x -= rat * proj_x;\n                            ent_a.y -= rat * proj_y;\n                            ent_b.x += notrat * proj_x;\n                            ent_b.y += notrat * proj_y;\n                        }\n                    \n                        if (ent_a.onCollide != null) { ent_a.onObstruct(ent_b, collision_info); }\n                        if (ent_b.onObstruct != null) { ent_b.onObstruct(ent_a, neg_collision_info); }\n                    }\n                }\n                return;\n            }\n\n            // Gets a layer by name. Returns null if the layer is not found.\n            getLayerByName(name) {\n                for (let i = 0; i < this.layers.length; i++) {\n                    let layer = this.layers[i];\n                    if (layer.name === name) { return layer; }\n                }\n                return null;\n            }\n        \n            start() {\n                for (let i = 0; i < this.layers.length; i++) {\n                    let layer = this.layers[i];\n                    if (layer.onStart != null) { layer.onStart(layer); }\n                }\n                for (let j = 0; j < this.entities.length; j++) {\n                    let ent = this.entities[j];\n                    if (ent.onStart != null) { ent.onStart(ent); }\n                }\n                return;\n            }\n        \n            update(dt) {\n                for (let i = 0; i < this.entities.length; i++) {\n                    let ent = this.entities[i];\n                    if (ent.update != null) { ent.update(dt); }\n                }\n                this.doCollisions();\n                if (this.camera.post_update != null) { this.camera.post_update(dt); }\n                return;\n            }\n        \n            draw(context, targx, targy) {\n                for (let i = 0; i < this.layers.length; i++) {\n                    let layer = this.layers[i];\n                    layer.draw(context, targx, targy);\n                }\n                return;\n            }\n        \n            debugDraw(context, targx, targy) {\n                let cam = this.camera;\n                let xoff = targx - cam.x;\n                let yoff = targy - cam.y;\n            \n                let found_first = false;\n                let iterable = __range__(0, this.entities.length, false);\n                for (let j = 0; j < iterable.length; j++) {\n                    let i = iterable[j];\n                    let ent = this.entities[i];\n                    if (ent.boundsIntersects(cam)) {\n                        ent.shapeSubpath(context, xoff, yoff);\n                        found_first = true;\n                    } else if (found_first && cam.boundsLeftOf(ent)) {\n                        break;\n                    }\n                }\n            \n                for (let k = 0; k < this.layers.length; k++) {\n                    let layer = this.layers[k];\n                    if (layer.type === 'objectgroup') {\n                        layer.debugDraw(context, targx, targy);\n                    }\n                }\n            \n                return;\n            }\n        },\n    \n        // A scene for running a map.\n        MapScene: class {\n            constructor(map) {\n                this.map = map;\n                return;\n            }\n        \n            start() {\n                if (!this.map.loaded) { throw `${this.map.name} not loaded!`; }\n                let {Entity} = entity;\n                let {Aabb} = geometry;\n            \n                // Camera is initially positioned at the origin.\n                this.map.camera = new Entity(0, 0,\n                    new Aabb([.5 * game.width(), .5 * game.height()]));\n            \n                this.map.entities.push(this.map.camera);\n            \n                this.map.start();\n                return;\n            }\n        \n            end() {}\n        \n            update(dt) {\n                this.map.update(dt);\n                return;\n            }\n        \n            draw(context) {\n                let gw = game.width();\n                let gh = game.height();\n                let hgw = .5 * gw;\n                let hgh = .5 * gh;\n            \n                context.clearRect(0, 0, gw, gh);\n                context.beginPath();\n            \n                this.map.draw(context, hgw, hgh);\n                if (input.debug.state) { this.map.debugDraw(context, hgw, hgh); }\n            \n                return;\n            }\n        }\n    };\n});\n\n\nfunction __range__(left, right, inclusive) {\n  let range = [];\n  let ascending = left < right;\n  let end = !inclusive ? right : ascending ? right + 1 : right - 1;\n  for (let i = left; ascending ? i < end : i > end; ascending ? i++ : i--) {\n    range.push(i);\n  }\n  return range;\n}","define(['./game'], game =>\n    // Using ye old midpoint method\n    ({\n        integrate(obj, dt) {\n            let v = obj.velocity || [0, 0];\n            let a = obj.acceleration || [0, 0];\n            let last_a = obj.last_acceleration || a;\n        \n            let damping = obj.damping || 1;\n        \n            v[0] *= damping;\n            v[1] *= damping;\n        \n            obj.x = obj.x + v[0] * dt + a[0] * dt * dt;\n            obj.y = obj.y + v[1] * dt + a[1] * dt * dt;\n        \n            v[0] = v[0] + a[0] * dt;\n            v[1] = v[1] + a[1] * dt;\n        \n            obj.velocity = v;\n            return;\n        }\n    })\n);\n\n","define(['jquery'], function($) {\n    // Similar to the map module, sprites are loaded via JSON from\n    // a url constructed from @name.\n    let url_prefix = 'assets/';\n    let url_suffix = '.json';\n    \n    return {\n        Sprite: class {\n            constructor(name, onload) {\n                this.name = name;\n                this.loaded = false;\n                let cb_target = this;\n                $.getJSON(url_prefix + this.name + url_suffix, function(data) {\n                    try {\n                        cb_target.load(data, onload);\n                    } catch (e) {\n                        throw 'could not load sprite ' +\n                            url_prefix + cb_target.name + url_suffix;\n                    }\n                    return;\n                });\n                return;\n            }\n        \n            // The sprite JSON format is as follows:\n            //\n            //     {\n            //       \"spritesheet\": FILENAME,\n            //       \"offset\": [SOFFX, SOFFY],\n            //       \"frames\": [\n            //         {\n            //           \"pos\": [X, Y],\n            //           \"size\": [W, H],\n            //           \"offset\": [FOFFX, FOFFY]\n            //         },\n            //         ...\n            //       ],\n            //       \"animations\": {\n            //         NAME: {\n            //           \"frames\": [[INDEX, DURATION(, HFLIPPED)], ...],\n            //           \"loop\": LOOP\n            //         },\n            //         ...\n            //       }\n            //     }\n            //\n            // Note: `FILENAME` is a string containing the name of the\n            // image which contains the spritesheet, `[SOFFX, SOFFY]` is\n            // the offset of the spritesheet in the image, `[X, Y]` is the\n            // top-left corner of the frame described in the spritesheet,\n            // `[W, H]` is the size of the frame, `[FOFFX, FOFFY]` is the\n            // offset of the top left corner of the frame from the position\n            // of the sprite (around which drawing flipped versions will\n            // be based), `NAME` is a string naming an animation, `INDEX`\n            // refers to the index of a frame, `DURATION` is how long that\n            // frame should stay onscreen in seconds, and `LOOP` is true\n            // or false depending on whether the animation should loop.\n            load(json_data, onload) {\n                let {offset, frames, animations} = json_data;\n            \n                for (let name in animations) {\n                    let animation = animations[name];\n                    let duration = 0;\n                    for (let i = 0; i < animation.frames.length; i++) {\n                        let frame = animation.frames[i];\n                        duration += frame[1];\n                    }\n                    animations[name].duration = duration;\n                }\n            \n                this.animations = animations;\n                let sprite = this;\n            \n                let image = new Image();\n                image.onload = function() {\n                    sprite.setupFrames(image, offset, frames);\n                    this.loaded = true;\n                    if (onload != null) { onload(); }\n                    return;\n                };\n                image.src = url_prefix + json_data.spritesheet;\n                return;\n            }\n        \n            setupFrames(img, offset, frames) {\n                let grabFrame = function(frame) {\n                    let fw = frame.size[0];\n                    let fh = frame.size[1];\n                    let fcanvas = document.createElement('canvas');\n                    fcanvas.width = fw;\n                    fcanvas.height = fh;\n                    let fctx = fcanvas.getContext('2d');\n                    fctx.drawImage(img,\n                        offset[0] + frame.pos[0],\n                        offset[1] + frame.pos[1],\n                        fw, fh, 0, 0, fw, fh);\n                \n                    return fcanvas;\n                };\n            \n                this.frames = frames.map(grabFrame);\n                this.frame_offsets = frames.map(frame => frame.offset);\n                return;\n            }\n        \n            startAnimation(anim_name, anim_speed = 1) {\n                this.current_animation = this.animations[anim_name];\n                this.animation_time = 0;\n                this.animation_speed = anim_speed;\n                return;\n            }\n        \n            update(dt) {\n                this.animation_time += dt * this.animation_speed;\n                return;\n            }\n        \n            draw(context, x, y, flip_h) {\n                let cur_anim = this.current_animation;\n                let cur_anim_dur = cur_anim.duration;\n                let frame_index = -1;\n                let anim_time = this.animation_time;\n            \n                if (cur_anim.loop) {\n                    anim_time %= cur_anim_dur;\n                } else if (anim_time > cur_anim_dur) {\n                    anim_time = cur_anim_dur;\n                }\n            \n                for (let i = 0; i < cur_anim.frames.length; i++) {\n                    let frame = cur_anim.frames[i];\n                    anim_time -= frame[1];\n                    if (anim_time <= 0) {\n                        frame_index = frame[0];\n                        var frame_hflipped = !!frame[2];\n                        break;\n                    }\n                }\n            \n                let frame_img = this.frames[frame_index];\n                let frame_offset = this.frame_offsets[frame_index];\n            \n                context.save();\n            \n                context.translate(Math.round(x), Math.round(y));\n                if (!!flip_h !== frame_hflipped) { context.transform(-1, 0, 0, 1, 0, 0); }\n                context.drawImage(frame_img, frame_offset[0], frame_offset[1]);\n            \n                context.restore();\n            \n                return;\n            }\n        }\n    };\n});\n\n","define(function() {\n    // An implementation of insertion sort\n    let insertionSort = function(ary, cmp) {\n        cmp = cmp || function(a, b) { if (a < b) { return -1; } else if (a === b) { return 0; } else { return 1; } };\n        let iterable = __range__(1, ary.length, false);\n        for (let k = 0; k < iterable.length; k++) {\n            let i = iterable[k];\n            let tmp = ary[i];\n            let j = i;\n            while (j > 0 && (cmp(ary[j - 1], tmp)) > 0) {\n                ary[j] = ary[j - 1];\n                --j;\n            }\n            ary[j] = tmp;\n        }\n        return;\n    };\n    \n    // requestAnimationFrame shim by Erik Möller\n    // with fixes from Paul Irish and Tino Zijdel.\n    //\n    // CoffeeScript port by Jacob Rus\n    (function() {\n        let w = window;\n        let iterable = ['ms', 'moz', 'webkit', 'o'];\n        for (let i = 0; i < iterable.length; i++) {\n            let vendor = iterable[i];\n            if (w.requestAnimationFrame) { break; }\n            w.requestAnimationFrame = w[vendor +\n                'RequestAnimationFrame'];\n            w.cancelAnimationFrame = (w[vendor +\n                'CancelAnimationFrame'] ||\n                w[`${vendor}CancelRequestAnimationFrame`]);\n        }\n\n        // Deal with the case where rAF is built in but cAF is not.\n        if (w.requestAnimationFrame) {\n            if (w.cancelAnimationFrame) { return; }\n            let browserRaf = w.requestAnimationFrame;\n            let canceled = {};\n            w.requestAnimationFrame = function(callback) {\n                let id;\n                return id = browserRaf(function(time) {\n                    if (id in canceled) { return delete canceled[id];\n                    } else { return callback(time); }\n                });\n            };\n            w.cancelAnimationFrame = id => canceled[id] = true;\n\n        // Handle legacy browsers which don’t implement rAF.\n        } else {\n            let targetTime = 0;\n            w.requestAnimationFrame = function(callback) {\n                let currentTime;\n                targetTime = Math.max(targetTime + 16, currentTime = +new Date());\n                return w.setTimeout((() => callback(+new Date())), targetTime - currentTime);\n            };\n\n            w.cancelAnimationFrame = id => clearTimeout(id);\n        }\n        \n        return;\n    })();\n    \n    // Performance.now polyfill.\n    // Thanks Tony Gentilcore for the [heads up](http://gent.ilcore.com/2012/06/better-timer-for-javascript.html).\n    let pNow = (function() {\n        // A monotonic but slightly inaccurate timer in seconds.\n        // Referenced Kevin Reid's implementation.\n        let time_offset = 0;\n        let time_seen = 0;\n        let fallback = function() {\n            let t = Date.now();\n            if (t < time_seen) { time_offset += time_seen - t; }\n            time_seen = t;\n            return (t + time_offset);\n        };\n        \n        if (typeof performance !== 'undefined' && performance !== null) {\n            if (performance.now != null) { return performance.now; }\n            \n            let iterable = ['ms', 'moz', 'webkit', 'o'];\n            for (let i = 0; i < iterable.length; i++) {\n                let vendor = iterable[i];\n                pNow = performance[vendor + 'Now'];\n                if (pNow != null) { return pNow; }\n            }\n        }\n        \n        return fallback;\n    })();\n    \n    // An epsilon for things involving real numbers and convergence.\n    return {\n        EPSILON: Math.pow(2, -50),\n    \n        time() { return .001 * pNow.call(window.performance); },\n    \n        // Insertion sort is used as a sort for arrays which don't change\n        // order much between frames.\n        persistentSort: insertionSort,\n    \n        // Constructs a 32-bit bitmask from an array of values ranging from\n        // 0 to 31 inclusive.\n        constructBitmask(group_array) {\n            let mask = 0;\n            for (let i = 0; i < group_array.length; i++) {\n                let group = group_array[i];\n                mask |= 1 << group;\n            }\n            return mask;\n        },\n    \n        // Turns an RGB tuple into a web-friendly hex representation.\n        rgbToHex(r, g, b) {\n            let toTwoDigitHex = v => `00${\n                (Math.min((Math.max((Math.round(v * 256)), 0)), 255)).\n                    toString(16)}`.substr(-2) ;\n            return `#${toTwoDigitHex(r)}${toTwoDigitHex(g)}${toTwoDigitHex(b)}`;\n        },\n\n        // Prepares a coroutine set from generator constructors\n        prepareCoroutineSet(updateGenerator, drawGenerator) {\n            let updateGen = updateGenerator();\n            let drawGen = drawGenerator();\n            updateGen.next();\n            drawGen.next();\n\n            return {\n                update: updateGen,\n                draw: drawGen\n            };\n        }\n    };\n});\nfunction __range__(left, right, inclusive) {\n  let range = [];\n  let ascending = left < right;\n  let end = !inclusive ? right : ascending ? right + 1 : right - 1;\n  for (let i = left; ascending ? i < end : i > end; ascending ? i++ : i--) {\n    range.push(i);\n  }\n  return range;\n}"]}